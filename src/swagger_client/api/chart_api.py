# coding: utf-8

"""
    Instrument Quote Source API (administrator)

    An ASP.NET Core Web API service for getting information about instrument quotes. Administrator tools to extend avaliable data  # noqa: E501

    OpenAPI spec version: v2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class ChartApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_chart_get(self, **kwargs):  # noqa: E501
        """Get All Charts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_chart_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ChartDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_chart_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_chart_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_chart_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get All Charts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_chart_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ChartDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_chart_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Chart', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ChartDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_chart_instrument_str_get(self, instrument_str, **kwargs):  # noqa: E501
        """Get All Charts for instrument  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_chart_instrument_str_get(instrument_str, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instrument_str: (required)
        :return: list[ChartDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_chart_instrument_str_get_with_http_info(instrument_str, **kwargs)  # noqa: E501
        else:
            (data) = self.api_chart_instrument_str_get_with_http_info(instrument_str, **kwargs)  # noqa: E501
            return data

    def api_chart_instrument_str_get_with_http_info(self, instrument_str, **kwargs):  # noqa: E501
        """Get All Charts for instrument  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_chart_instrument_str_get_with_http_info(instrument_str, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instrument_str: (required)
        :return: list[ChartDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instrument_str']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_chart_instrument_str_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instrument_str' is set
        if ('instrument_str' not in params or
                params['instrument_str'] is None):
            raise ValueError("Missing the required parameter `instrument_str` when calling `api_chart_instrument_str_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instrument_str' in params:
            path_params['instrumentStr'] = params['instrument_str']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Chart/{instrumentStr}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ChartDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_chart_instrument_str_timeframe_str_get(self, instrument_str, timeframe_str, **kwargs):  # noqa: E501
        """Get Candles from instrument|timeframe Chart  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_chart_instrument_str_timeframe_str_get(instrument_str, timeframe_str, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instrument_str: (required)
        :param str timeframe_str: (required)
        :param datetime _from:
        :param datetime untill:
        :return: list[CandleDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_chart_instrument_str_timeframe_str_get_with_http_info(instrument_str, timeframe_str, **kwargs)  # noqa: E501
        else:
            (data) = self.api_chart_instrument_str_timeframe_str_get_with_http_info(instrument_str, timeframe_str, **kwargs)  # noqa: E501
            return data

    def api_chart_instrument_str_timeframe_str_get_with_http_info(self, instrument_str, timeframe_str, **kwargs):  # noqa: E501
        """Get Candles from instrument|timeframe Chart  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_chart_instrument_str_timeframe_str_get_with_http_info(instrument_str, timeframe_str, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instrument_str: (required)
        :param str timeframe_str: (required)
        :param datetime _from:
        :param datetime untill:
        :return: list[CandleDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instrument_str', 'timeframe_str', '_from', 'untill']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_chart_instrument_str_timeframe_str_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instrument_str' is set
        if ('instrument_str' not in params or
                params['instrument_str'] is None):
            raise ValueError("Missing the required parameter `instrument_str` when calling `api_chart_instrument_str_timeframe_str_get`")  # noqa: E501
        # verify the required parameter 'timeframe_str' is set
        if ('timeframe_str' not in params or
                params['timeframe_str'] is None):
            raise ValueError("Missing the required parameter `timeframe_str` when calling `api_chart_instrument_str_timeframe_str_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instrument_str' in params:
            path_params['instrumentStr'] = params['instrument_str']  # noqa: E501
        if 'timeframe_str' in params:
            path_params['timeframeStr'] = params['timeframe_str']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'untill' in params:
            query_params.append(('untill', params['untill']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Chart/{instrumentStr}/{timeframeStr}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CandleDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_chart_instrument_str_timeframe_str_post(self, instrument_str, timeframe_str, **kwargs):  # noqa: E501
        """Post candle into instument|timeframe chart  # noqa: E501

        Sample request:                    POST api/Quote/EURUSD/timeframe/D1      {         \"From\": \"2023-01-01T00:00:00.000Z\",         \"Untill\":\"2023-01-10T00:00:00.000Z\",         \"candles\": [           {             \"dateTime\": \"2023-01-01T00:00:00.000Z\",             \"open\": 10,             \"high\": 20,             \"low\": 5,             \"close\": 8,             \"volume\": 10           },           {             \"dateTime\": \"2023-01-09T00:00:00.000Z\",             \"open\": 15,             \"high\": 20,             \"low\": 10,             \"close\": 13,             \"volume\": 5           }         ]      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_chart_instrument_str_timeframe_str_post(instrument_str, timeframe_str, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instrument_str: (required)
        :param str timeframe_str: (required)
        :param UploadedCandlesDto body:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_chart_instrument_str_timeframe_str_post_with_http_info(instrument_str, timeframe_str, **kwargs)  # noqa: E501
        else:
            (data) = self.api_chart_instrument_str_timeframe_str_post_with_http_info(instrument_str, timeframe_str, **kwargs)  # noqa: E501
            return data

    def api_chart_instrument_str_timeframe_str_post_with_http_info(self, instrument_str, timeframe_str, **kwargs):  # noqa: E501
        """Post candle into instument|timeframe chart  # noqa: E501

        Sample request:                    POST api/Quote/EURUSD/timeframe/D1      {         \"From\": \"2023-01-01T00:00:00.000Z\",         \"Untill\":\"2023-01-10T00:00:00.000Z\",         \"candles\": [           {             \"dateTime\": \"2023-01-01T00:00:00.000Z\",             \"open\": 10,             \"high\": 20,             \"low\": 5,             \"close\": 8,             \"volume\": 10           },           {             \"dateTime\": \"2023-01-09T00:00:00.000Z\",             \"open\": 15,             \"high\": 20,             \"low\": 10,             \"close\": 13,             \"volume\": 5           }         ]      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_chart_instrument_str_timeframe_str_post_with_http_info(instrument_str, timeframe_str, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instrument_str: (required)
        :param str timeframe_str: (required)
        :param UploadedCandlesDto body:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instrument_str', 'timeframe_str', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_chart_instrument_str_timeframe_str_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instrument_str' is set
        if ('instrument_str' not in params or
                params['instrument_str'] is None):
            raise ValueError("Missing the required parameter `instrument_str` when calling `api_chart_instrument_str_timeframe_str_post`")  # noqa: E501
        # verify the required parameter 'timeframe_str' is set
        if ('timeframe_str' not in params or
                params['timeframe_str'] is None):
            raise ValueError("Missing the required parameter `timeframe_str` when calling `api_chart_instrument_str_timeframe_str_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instrument_str' in params:
            path_params['instrumentStr'] = params['instrument_str']  # noqa: E501
        if 'timeframe_str' in params:
            path_params['timeframeStr'] = params['timeframe_str']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Chart/{instrumentStr}/{timeframeStr}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_chart_instrument_str_timeframe_str_target_time_frame_get(self, instrument_str, timeframe_str, target_time_frame, **kwargs):  # noqa: E501
        """Get Joined Candles from instrument|timeframe|targetTimeFrame Chart  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_chart_instrument_str_timeframe_str_target_time_frame_get(instrument_str, timeframe_str, target_time_frame, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instrument_str: (required)
        :param str timeframe_str: (required)
        :param str target_time_frame: (required)
        :param datetime _from:
        :param datetime untill:
        :param bool only_last:
        :return: list[JoinedCandleDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_chart_instrument_str_timeframe_str_target_time_frame_get_with_http_info(instrument_str, timeframe_str, target_time_frame, **kwargs)  # noqa: E501
        else:
            (data) = self.api_chart_instrument_str_timeframe_str_target_time_frame_get_with_http_info(instrument_str, timeframe_str, target_time_frame, **kwargs)  # noqa: E501
            return data

    def api_chart_instrument_str_timeframe_str_target_time_frame_get_with_http_info(self, instrument_str, timeframe_str, target_time_frame, **kwargs):  # noqa: E501
        """Get Joined Candles from instrument|timeframe|targetTimeFrame Chart  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_chart_instrument_str_timeframe_str_target_time_frame_get_with_http_info(instrument_str, timeframe_str, target_time_frame, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instrument_str: (required)
        :param str timeframe_str: (required)
        :param str target_time_frame: (required)
        :param datetime _from:
        :param datetime untill:
        :param bool only_last:
        :return: list[JoinedCandleDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instrument_str', 'timeframe_str', 'target_time_frame', '_from', 'untill', 'only_last']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_chart_instrument_str_timeframe_str_target_time_frame_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instrument_str' is set
        if ('instrument_str' not in params or
                params['instrument_str'] is None):
            raise ValueError("Missing the required parameter `instrument_str` when calling `api_chart_instrument_str_timeframe_str_target_time_frame_get`")  # noqa: E501
        # verify the required parameter 'timeframe_str' is set
        if ('timeframe_str' not in params or
                params['timeframe_str'] is None):
            raise ValueError("Missing the required parameter `timeframe_str` when calling `api_chart_instrument_str_timeframe_str_target_time_frame_get`")  # noqa: E501
        # verify the required parameter 'target_time_frame' is set
        if ('target_time_frame' not in params or
                params['target_time_frame'] is None):
            raise ValueError("Missing the required parameter `target_time_frame` when calling `api_chart_instrument_str_timeframe_str_target_time_frame_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instrument_str' in params:
            path_params['instrumentStr'] = params['instrument_str']  # noqa: E501
        if 'timeframe_str' in params:
            path_params['timeframeStr'] = params['timeframe_str']  # noqa: E501
        if 'target_time_frame' in params:
            path_params['targetTimeFrame'] = params['target_time_frame']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'untill' in params:
            query_params.append(('untill', params['untill']))  # noqa: E501
        if 'only_last' in params:
            query_params.append(('onlyLast', params['only_last']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Chart/{instrumentStr}/{timeframeStr}/{targetTimeFrame}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JoinedCandleDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
