# coding: utf-8

"""
    Instrument Quote Source API (administrator)

    An ASP.NET Core Web API service for getting information about instrument quotes. Administrator tools to extend avaliable data  # noqa: E501

    OpenAPI spec version: v2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JoinedCandleDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_time': 'datetime',
        'open': 'float',
        'high': 'float',
        'low': 'float',
        'close': 'float',
        'volume': 'float',
        'target_date_time': 'datetime',
        'is_last': 'bool',
        'is_full_calced': 'bool'
    }

    attribute_map = {
        'date_time': 'dateTime',
        'open': 'open',
        'high': 'high',
        'low': 'low',
        'close': 'close',
        'volume': 'volume',
        'target_date_time': 'targetDateTime',
        'is_last': 'isLast',
        'is_full_calced': 'isFullCalced'
    }

    def __init__(self, date_time=None, open=None, high=None, low=None, close=None, volume=None, target_date_time=None, is_last=None, is_full_calced=None):  # noqa: E501
        """JoinedCandleDto - a model defined in Swagger"""  # noqa: E501
        self._date_time = None
        self._open = None
        self._high = None
        self._low = None
        self._close = None
        self._volume = None
        self._target_date_time = None
        self._is_last = None
        self._is_full_calced = None
        self.discriminator = None
        self.date_time = date_time
        self.open = open
        self.high = high
        self.low = low
        self.close = close
        self.volume = volume
        self.target_date_time = target_date_time
        if is_last is not None:
            self.is_last = is_last
        if is_full_calced is not None:
            self.is_full_calced = is_full_calced

    @property
    def date_time(self):
        """Gets the date_time of this JoinedCandleDto.  # noqa: E501


        :return: The date_time of this JoinedCandleDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this JoinedCandleDto.


        :param date_time: The date_time of this JoinedCandleDto.  # noqa: E501
        :type: datetime
        """
        if date_time is None:
            raise ValueError("Invalid value for `date_time`, must not be `None`")  # noqa: E501

        self._date_time = date_time

    @property
    def open(self):
        """Gets the open of this JoinedCandleDto.  # noqa: E501


        :return: The open of this JoinedCandleDto.  # noqa: E501
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this JoinedCandleDto.


        :param open: The open of this JoinedCandleDto.  # noqa: E501
        :type: float
        """
        if open is None:
            raise ValueError("Invalid value for `open`, must not be `None`")  # noqa: E501

        self._open = open

    @property
    def high(self):
        """Gets the high of this JoinedCandleDto.  # noqa: E501


        :return: The high of this JoinedCandleDto.  # noqa: E501
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this JoinedCandleDto.


        :param high: The high of this JoinedCandleDto.  # noqa: E501
        :type: float
        """
        if high is None:
            raise ValueError("Invalid value for `high`, must not be `None`")  # noqa: E501

        self._high = high

    @property
    def low(self):
        """Gets the low of this JoinedCandleDto.  # noqa: E501


        :return: The low of this JoinedCandleDto.  # noqa: E501
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this JoinedCandleDto.


        :param low: The low of this JoinedCandleDto.  # noqa: E501
        :type: float
        """
        if low is None:
            raise ValueError("Invalid value for `low`, must not be `None`")  # noqa: E501

        self._low = low

    @property
    def close(self):
        """Gets the close of this JoinedCandleDto.  # noqa: E501


        :return: The close of this JoinedCandleDto.  # noqa: E501
        :rtype: float
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this JoinedCandleDto.


        :param close: The close of this JoinedCandleDto.  # noqa: E501
        :type: float
        """
        if close is None:
            raise ValueError("Invalid value for `close`, must not be `None`")  # noqa: E501

        self._close = close

    @property
    def volume(self):
        """Gets the volume of this JoinedCandleDto.  # noqa: E501


        :return: The volume of this JoinedCandleDto.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this JoinedCandleDto.


        :param volume: The volume of this JoinedCandleDto.  # noqa: E501
        :type: float
        """
        if volume is None:
            raise ValueError("Invalid value for `volume`, must not be `None`")  # noqa: E501

        self._volume = volume

    @property
    def target_date_time(self):
        """Gets the target_date_time of this JoinedCandleDto.  # noqa: E501


        :return: The target_date_time of this JoinedCandleDto.  # noqa: E501
        :rtype: datetime
        """
        return self._target_date_time

    @target_date_time.setter
    def target_date_time(self, target_date_time):
        """Sets the target_date_time of this JoinedCandleDto.


        :param target_date_time: The target_date_time of this JoinedCandleDto.  # noqa: E501
        :type: datetime
        """
        if target_date_time is None:
            raise ValueError("Invalid value for `target_date_time`, must not be `None`")  # noqa: E501

        self._target_date_time = target_date_time

    @property
    def is_last(self):
        """Gets the is_last of this JoinedCandleDto.  # noqa: E501


        :return: The is_last of this JoinedCandleDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_last

    @is_last.setter
    def is_last(self, is_last):
        """Sets the is_last of this JoinedCandleDto.


        :param is_last: The is_last of this JoinedCandleDto.  # noqa: E501
        :type: bool
        """

        self._is_last = is_last

    @property
    def is_full_calced(self):
        """Gets the is_full_calced of this JoinedCandleDto.  # noqa: E501


        :return: The is_full_calced of this JoinedCandleDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_full_calced

    @is_full_calced.setter
    def is_full_calced(self, is_full_calced):
        """Sets the is_full_calced of this JoinedCandleDto.


        :param is_full_calced: The is_full_calced of this JoinedCandleDto.  # noqa: E501
        :type: bool
        """

        self._is_full_calced = is_full_calced

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JoinedCandleDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JoinedCandleDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
