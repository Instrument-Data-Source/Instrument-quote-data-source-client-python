# coding: utf-8

"""
    Instrument Quote Source API

    An ASP.NET Core Web API service for getting information about instrument quotes  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewInstrumentRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'code': 'str',
        'type': 'str',
        'type_id': 'int',
        'price_decimal_len': 'int',
        'volume_decimal_len': 'int'
    }

    attribute_map = {
        'name': 'name',
        'code': 'code',
        'type': 'type',
        'type_id': 'typeId',
        'price_decimal_len': 'priceDecimalLen',
        'volume_decimal_len': 'volumeDecimalLen'
    }

    def __init__(self, name=None, code=None, type=None, type_id=None, price_decimal_len=None, volume_decimal_len=None):  # noqa: E501
        """NewInstrumentRequestDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._code = None
        self._type = None
        self._type_id = None
        self._price_decimal_len = None
        self._volume_decimal_len = None
        self.discriminator = None
        self.name = name
        self.code = code
        if type is not None:
            self.type = type
        if type_id is not None:
            self.type_id = type_id
        if price_decimal_len is not None:
            self.price_decimal_len = price_decimal_len
        if volume_decimal_len is not None:
            self.volume_decimal_len = volume_decimal_len

    @property
    def name(self):
        """Gets the name of this NewInstrumentRequestDto.  # noqa: E501


        :return: The name of this NewInstrumentRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewInstrumentRequestDto.


        :param name: The name of this NewInstrumentRequestDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def code(self):
        """Gets the code of this NewInstrumentRequestDto.  # noqa: E501


        :return: The code of this NewInstrumentRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this NewInstrumentRequestDto.


        :param code: The code of this NewInstrumentRequestDto.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def type(self):
        """Gets the type of this NewInstrumentRequestDto.  # noqa: E501


        :return: The type of this NewInstrumentRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NewInstrumentRequestDto.


        :param type: The type of this NewInstrumentRequestDto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def type_id(self):
        """Gets the type_id of this NewInstrumentRequestDto.  # noqa: E501


        :return: The type_id of this NewInstrumentRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this NewInstrumentRequestDto.


        :param type_id: The type_id of this NewInstrumentRequestDto.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def price_decimal_len(self):
        """Gets the price_decimal_len of this NewInstrumentRequestDto.  # noqa: E501


        :return: The price_decimal_len of this NewInstrumentRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._price_decimal_len

    @price_decimal_len.setter
    def price_decimal_len(self, price_decimal_len):
        """Sets the price_decimal_len of this NewInstrumentRequestDto.


        :param price_decimal_len: The price_decimal_len of this NewInstrumentRequestDto.  # noqa: E501
        :type: int
        """

        self._price_decimal_len = price_decimal_len

    @property
    def volume_decimal_len(self):
        """Gets the volume_decimal_len of this NewInstrumentRequestDto.  # noqa: E501


        :return: The volume_decimal_len of this NewInstrumentRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._volume_decimal_len

    @volume_decimal_len.setter
    def volume_decimal_len(self, volume_decimal_len):
        """Sets the volume_decimal_len of this NewInstrumentRequestDto.


        :param volume_decimal_len: The volume_decimal_len of this NewInstrumentRequestDto.  # noqa: E501
        :type: int
        """

        self._volume_decimal_len = volume_decimal_len

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewInstrumentRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewInstrumentRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
